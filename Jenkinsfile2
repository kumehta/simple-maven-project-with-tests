pipeline {
   agent any
   
   parameters {
     choice choices: ['development', 'master', 'uat_testing'], description: '', name: 'Branch_Name'
   }

   tools {
      // Install the Maven version configured as "M3" and add it to the path.
      maven "M3"
      jdk 'java_latest'
      git 'Git'
   }
   
   environment {
        // This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "192.168.0.105:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "snapshot"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus-credentials"
    }

   stages {
      stage('Build') {
         steps {
            // Get some code from a GitHub repository
            git branch: '$Branch_Name', url: 'https://github.com/kumehta/simple-maven-project-with-tests.git'

            sh "mvn -DskipTests=true clean package"
       }

         post {
           success {
             archiveArtifacts 'target/*.jar'
             
           }
         }
      }
      
      stage('Unit Testing') {
         steps {
             sh "mvn -Dmaven.main.skip -Dmaven.test.failure.ignore=true test"
         }

         post {
           success {
               junit '**/target/surefire-reports/TEST-*.xml'
           }
         }
      }
      
      stage("Publish to Nexus") {
            steps {
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging]
                                // ,
                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                // [artifactId: pom.artifactId,
                                // classifier: '',
                                // file: "pom.xml",
                                // type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
   }
}
